========= Grammars for the Parser =========

*               : One or more
?               : Optional

statements      : NEWLINE* statement (NEWLINE* statement)* NEWLINE*

statement       : KEYWORD:return expr?
                : KEYWORD:continue
                : KEYWORD:br
                : expr

expr            : KEYWORD:let IDENTIFIER EQ expr
                : IDENTIFIER EQ expr
                : comp-expr ((KEYWORD:and|OR) comp-expr)*

comp-expr       : KEYWORD:not comp-expr
                : arith-expr ((EE|NE|LT|GT|LTE|GTE) arith-expr)*


arith-expr      : term ((PLUS|MINUS) term)*

term            : factor ((MUL|DIV) factor)*

factor          : (PLUS|MINUS) factor
                : power

power           : call (POW factor)*

call            : atom (LPAREN (expr (COMMA expr)*)? RPAREN)?

atom            : INT|FLOAT|IDENTIFIER|STRING
                : LPAREN expr RPAREN
                : list-expr
                : if-expr
                : for-expr
                : while-expr
                : func-def

list-expr       : LSQUARE (expr (COMMA expr)*)? RSQUARE

if-expr         : KEYWORD:if expr KEYWORD:then
                  (statement if-expr-b|if-expr-c?)
                  | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-b       : KEYWORD:elif expr KEYWORD:then
                  (statement if-expr-b|if-expr-c?)
                  | (NEWLINE statements KEYWORD:END|if-expr-b|if-expr-c)

if-expr-c       : KEYWORD:else statement
                  | (NEWLINE statements KEYWORD:END)

for-expr        : KEY:for IDENTIFIER EQ expr KEYWORD:to expr
                  (KEYWORD:step expr)? KEYWORD:then statement
                  | (NEWLINE statements KEYWORD:END)

while-expr      : KEYWORD:while expr KEYWORD:then statement
                  | (NEWLINE statements KEYWORD:END)

func-def        : KEYWORD:fun IDENTIFIER?
                  LPAREN (IDENTIFIER (COMMA IDENTIFIER)*)? RPAREN
                  (ARROW expr)
                  | (NEWLINE statements KEYWORD:END)
